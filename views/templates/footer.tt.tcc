use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.27
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1543818944',
        'name' => 'templates/footer.tt',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
#line 1 "/icyavocado/pastey/views/templates/footer.tt"
# USE
$stash->set('JSON',
            $context->plugin('JSON'));
$output .=  "\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<script src=\"";
#line 4 "/icyavocado/pastey/views/templates/footer.tt"
$output .=  $stash->get(['request', 0, 'uri_base', 0]);
$output .=  "/javascripts/vue-codemirror.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/qs/6.6.0/qs.min.js\"></script>\n<script>\naddEventListener('load', function() {\n  var code = document.querySelector('#code');\n  var worker = new Worker('/javascripts/worker.js');\n  worker.onmessage = function(event) { code.innerHTML = event.data; }\n  worker.postMessage(code.textContent);\n})\n\nVue.use(window.VueCodemirror)\n\nnew Vue({\n  el: '#app',\n  data: {\n    error: '',\n    state: {\n      name: '',\n      code: ";
#line 22 "/icyavocado/pastey/views/templates/footer.tt"
if ($stash->get('value')) {
#line 22 "/icyavocado/pastey/views/templates/footer.tt"
$output .=  $stash->get(['value', 0, 'json', 0]);
}
else {
$output .=  "''";
}

$output .=  ",\n    },\n    cmOptions: {\n      tabSize: 2,\n      mode: '";
#line 26 "/icyavocado/pastey/views/templates/footer.tt"
if ($stash->get('extention')) {
#line 26 "/icyavocado/pastey/views/templates/footer.tt"
$output .=  $stash->get('extention');
}
else {
$output .=  "text/javascript";
}

$output .=  "',\n      theme: 'blackboard',\n      lineNumbers: true,\n      line: true,\n      readOnly: ";
#line 30 "/icyavocado/pastey/views/templates/footer.tt"
if ($stash->get('value')) {
$output .=  "true";
}
else {
$output .=  "false";
}

$output .=  "\n    }\n  },\n  methods: {\n    onSave() {\n      axios.post('/', Qs.stringify({\n        value: this.state.code\n      })).then(result => {\n        this.cmOptions.readOnly = true\n        this.state.name = result.data.name\n        this.setURL()\n      }).catch(error => {\n        this.error = error\n      })\n    },\n    onCreate() {\n      this.state.code = ''\n      this.state.name = ''\n      this.setURL()\n      this.cmOptions.readOnly = false\n\n    },\n    onDupandEdit() {\n      this.state.name = ''\n      this.setURL()\n      this.cmOptions.readOnly = false\n    },\n    getTextOnly() {\n      window.location.href = '/raw/";
#line 58 "/icyavocado/pastey/views/templates/footer.tt"
$output .=  $stash->get('name');
$output .=  "'\n    },\n    setURL() {\n      window.history.pushState(null, \"Pastey \" + this.state.name, \"/\" + this.state.name);\n    }\n  }\n})\n\n</script>";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
