#!/usr/bin/env perl

use lib "/icyavocado/pastey/local/lib/perl5";
use strict;
use warnings;
use Path::Tiny;
use Data::Dumper;
use Function::Parameters;

my $path = "/icyavocado/pastey";

my %default_options = (
  port    => '8080',
  name    => 'pastey',
  local   => $path,
  workers => '5'
);

my %descriptions = (
  '--port'    => 'Port that the app will run on. [default 8080]',
  '--workers' => 'Set workers for starman use. [default 5]',
  '--local'   => 'Local folder of the app. [default ' . $path . ']',
  '--name' =>
    'Use to construct module name and pid file. eg: Pastey => Pastey.pm. [default pastey]'
);

my %options = parseOption(@ARGV);

# APP PSGI
my $app_psgi = "$path/bin/app.psgi";

# ERROR LOG DIRECTORY
my $error_file = "$path/logs/$options{name}-error.log";
my $error_dir  = "$path/logs/";
if ( !-e $error_dir || !-d $error_dir ) { mkdir $error_dir; }

# PID FILE
my $pid_file = "$path/$options{name}.pid";

if ( -e $pid_file ) {
  open FILE, '<', $pid_file or die "Can't open '$pid_file': $!";
  my @pids = <FILE>;
  kill -9, $pids[0];
}

# STARTING APP COMMAND
my $command
  = sprintf(
  "carton exec plackup -s Starman --pid %s -p %s --workers=%s -a %s --error-log %s --daemonize",
  $pid_file, $options{port}, $options{workers}, $app_psgi, $error_file );

# RUN COMMAND
open my $fc, "| $command";

# SET PID BACK TO THE PROGRAM

# STARTING APP
print "[DONE] App successfully started at port :$options{port}\n";

# TAIL THE LOG
# my $file = File::Tail->new($error_file);
# while ( defined( my $line = $file->read ) ) {
#   print "$line";
# }

fun parseOption(@ARGV) {
  if ( $ARGV[0] && $ARGV[0] eq '--help' ) {
    showAvailableOptions();
  }
  my %user_options = map { $_ =~ s/-//g; $_; } @ARGV;
  return ( %default_options, %user_options );
}

fun showAvailableOptions() {
  printf( "  %-10s  |  %-50s\n", $_, $descriptions{$_} )
    foreach keys %descriptions;
  printf "\n\n";
}
